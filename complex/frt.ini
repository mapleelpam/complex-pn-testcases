
primitive_types
{
    mapper
    {
        Boolean NativeBoolean
        float float
        int NativeInt 
        uint NativeUint 
        void void
        Void void
    } 
}
prepend_data
{
    prefix_warning "/* THIS FILE IS GENREATED BY pn-translater, you should not modify this file.*/"
    license_declare "/* NO LICNESE DECLARE */"
    authors Xing
    headers "#include <stdio.h>\n#include \"toplevel/TopLevel.h\"\n#include \"display/Display.h\" \n#include \"geom/Geom.h\" \n#include \"text/Text.h\"\nusing namespace agm::reflection;"
}
FunctionParameterItem
{
    pointer_pattern Ptr
    template ""
}
ExpressionList
{
    template
    {
        setter_prepend set_
        getter_prepend get_
    }
}
InstanceOf
{
    template "INSTANCEOF( #(instance_name), #(type_name_style2) )"
}
Is
{
    template "IS(#(instance_name), #(type_name_style2) )"
}
As
{
    template "AS(#(instance_name),  #(type_name_style2)  )"
}
FunctionDefinition
{
    template #(function_signature)#(member_initial)#(function_enter)#(func_body)#(function_leave)#(func_static_instance)#(endl)
    {
        normal_signature "#(endl)#(indent_tab)#(function_attribute_stmt)#(function_is_static)#(function_is_virtual)#(func_ret_type)  #(func_name_prefix)#(func_name)(#(prefix_parameters)#(func_parameters)#(postfix_parameters))"

        member_signature "#(indent_tab)#(function_attribute_stmt)#(endl)#(indent_tab)#(function_is_static)#(function_is_virtual)#(func_ret_type)  #(func_name_prefix)#(func_name)(#(prefix_parameters)#(func_parameters)#(postfix_parameters))"

        constructor_signature "#(indent_tab)#(function_attribute_stmt)#(endl)#(indent_tab)#(contructor_prefix_info)#(endl)#(indent_tab)#(function_is_static)#(function_is_virtual) #(func_name_prefix)#(func_name)(#(prefix_parameters)#(func_parameters) #(postfix_parameters) )"

        enter_function "#(endl)#(indent_tab){#(endl)#(indent_tab_add)#(enter_stmt)"
        leave_function "#(indent_tab_add)/*leave function*/#(endl)#(indent_tab)}"
		contructor_prefix_info "CONSTRUCTOR_INFO_#(func_parameters_number)_A_#(func_default_parameters_number)_DA(#(func_name)#(func_parameter_types));"
    }
    pointer_pattern Ptr 
	default_virtual true
}
VariableDeclare
{
    pointer_pattern Ptr
    template "#(indent_tab)#(var_attribute_stmt)#(var_is_static)#(var_type) #(var_name) #(var_init);#(endl)"

}
IfStatement
{
    template "#(indent_tab)if(#(if_condition)){#(endl)#(then_stmt)#(indent_tab)}else{#(endl)#(else_stmt)#(indent_tab)}#(endl)"
}
ClassDefinition
{
    inherit
    {
        base Object
        type 1
    }
    template 
    {   
        class "#(endl)#(indent_tab)SMART_PTR(#(class_name));#(endl)#(indent_tab)class #(class_name) #(class_inherit) #(endl)#(indent_tab){#(endl)#(indent_tab_add)public:#(endl)#(indent_tab_add)DECLARE_RTTI;#(endl)#(indent_tab_add)CLASS(#(class_name), #(class_base_fqn2) ,#(class_fqn2));#(endl)#(class_properties)#(class_stmt)#(endl)#(class_default_constructor)#(endl)#(indent_tab_add)public:#(endl)#(indent_tab_add)INVOKE(#(class_base))#(endl)#(indent_tab_add)METHOD_REFLECTION_BEGIN#(endl)#(method_info)#(endl)#(endl)#(indent_tab_add)METHOD_REFLECTION_END#(endl)#(indent_tab)};#(endl)#(indent_tab)IMPLEMENT_RTTI(#(class_name), #(class_fqn2), #(class_base_fqn2), \"#(class_implements_list)\");#(endl)"

        interface "#(endl)#(indent_tab)SMART_PTR(#(class_name));#(endl)#(indent_tab)class #(class_name)  #(endl)#(indent_tab){#(endl)#(class_stmt)#(indent_tab)};#(endl)"
		

		property "PROPERTY( #(property_type), #(property_name) );"
		property_begin "#(indent_tab_add)BEGIN_PROPERTY()#(endl)"
		property_end "#(indent_tab_add)END_PROPERTY(#(class_name))#(endl)"
        default_setter "#(variable_attribute): void set_#(variable_name)( #(variable_type) i ){ #(variable_name) = i;	}"
        default_getter "#(variable_attribute): #(variable_type) get_#(variable_name)( ) const { return #(variable_name);	}"

        info
        {
            void_method "#(endl)#(indent_tab_add)VOID_METHOD_INFO_#(numof_parameter)_A_0_DA(#(function_name)#(function_parameters))"
            normal_method "#(endl)#(indent_tab_add)METHOD_INFO_#(numof_parameter)_A_0_DA(#(function_type),#(function_name)#(function_parameters))"
            constructor "#(indent_tab_add)CONSTRUCTOR_INFO_0_A_0_DA(#(class_name));#(endl)#(indent_tab_add)public: #(class_name)()"
        }
    }
}
Arguments
{
    pcast_postfix "(Object*)"
}
DeleteStatement
{
    template "DELETE(#(delete_expression))"
}

