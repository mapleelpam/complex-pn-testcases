
primitive_types
{
    float   false
    int     false

    Array   true
    Boolean true
    Number  true
    Object  true
    String  true
    Uint    true
    Int     true
    XML     true
    XMLList true
}
prepend_data
{
    prefix_warning "/* THIS FILE IS GENREATED BY pn-translater, you should not modify this file.*/"
    license_declare "/* NO LICNESE DECLARE */"
    authors Xing
    headers "#include <stdio.h>\n#include <frt/toplevel/TopLevel.h>\n"
}
InstanceOf
{
    template "(#(instance_name))->isInstanceOf( \"#(type_name)\" )"
}
Is
{
    template "(#(instance_name))->is( \"#(type_name)\" )"
}
FunctionDefinition
{
    template "#(indent_tab)#(func_ret_type) #(func_name)(#(func_parameters))#(endl)#(indent_tab){#(endl)#(func_body)#(indent_tab)}#(endl)"
}
VariableDeclare
{
    type
    {
        mapper
        {
            float float
            int int
            __DEFAULT__ #(type_name)Ptr
        }
    }
    template "#(indent_tab)#(var_type) #(var_name) #(var_init);#(endl)" 

}
IfStatement
{
    template "#(indent_tab)if(#(if_condition)){#(endl)#(then_stmt)#(indent_tab)}else{#(endl)#(else_stmt)#(indent_tab)}#(endl)"
}
ClassDefine
{
    inherit
    {
        base "Object"
    }
    template "#(indent_tab)SMART_PTR(#(class_name));#(endl)#(indent_tab)class #(class_name) #(class_inherit_token) #(class_inherit) #(endl)#(indent_tab){#(endl)#(indent_tab)DECLARE_RTTI;#(endl)#(class_stmt)#(indent_tab)};#(endl)#(indent_tab)IMPLEMENT_RTTI(#(class_name),  #(class_inherit) , \"\");#(endl)#(endl)"
}
